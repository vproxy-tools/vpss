package io.vproxy.vpss.launch

import io.vproxy.app.app.Application
import io.vproxy.base.util.Annotations
import io.vproxy.base.util.LogType
import io.vproxy.base.util.Logger
import io.vproxy.vpss.config.Config
import io.vproxy.vpss.entity.Net
import io.vproxy.vpss.util.Consts
import io.vproxy.vpss.util.Global
import io.vproxy.vpss.util.VPSSUtils

object NetworkLaunch {
  fun launch() {
    Logger.alert("launching networks ...")

    for (net in Config.get().config.networks) {
      createNetwork(net)
    }
    // sync ips every few seconds
    Application.get().controlEventLoop.selectorEventLoop.period(30_000) { syncIps() }
  }

  private fun createNetwork(net: Net) {
    val network = if (net.vni == Consts.defaultNetwork) {
      Global.getSwitch().getNetwork(Consts.defaultNetwork) // this is created inside DHCPLaunch
    } else {
      Global.getSwitch().addNetwork(net.vni, net.v4net, net.v6net, Annotations())
    }
    Logger.alert("network ${net.vni} ${net.v4net} ${net.v6net} added")
    network.putUserData(Consts.allowIpv6Key, net.allowIpv6)
    for (ip in net.ips) {
      if (ip.system) { // skip all system ips, they should be generated by default or created somewhere else
        continue
      }
      val nip = network.addIp(ip.ip, ip.mac, Annotations())
      nip.routing = ip.routing
      Logger.alert("ip ${ip.ip} ${ip.mac} added to network ${net.vni}")
    }
    for (route in net.routes) {
      if (route.system) { // skip all system routes, they should be generated by default or created somewhere else
        continue
      }
      val rule = VPSSUtils.buildRuleFromNetRoute(network.vni, route)
      network.routeTable.addRule(rule)
      Logger.alert("route $rule added to network ${net.vni}")
    }
  }

  private var printSyncIpsInfoCount = 0
  private fun syncIps() {
    if (printSyncIpsInfoCount <= 20) {
      Logger.alert("begin to sync local ips ...")
    }
    if (printSyncIpsInfoCount == 20) {
      Logger.warn(LogType.ALERT, "suppress the info log of sync-ing local ips from now on")
    }
    VPSSUtils.syncLocalIPs()
    ++printSyncIpsInfoCount
  }
}
