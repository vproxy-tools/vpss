package io.vproxy.vpss.util

object ErrorCode {
  const val forbidden = "err.forbidden"
  const val badArgsPassLengthTooShort = "err.bad_args.pass_length_too_short"
  const val badArgsMissingIfaceName = "err.bad_args.missing_iface_name"
  const val badArgsMissingIfaceVni = "err.bad_args.missing_iface_vni"
  const val badArgsInvalidIfaceVni = "err.bad_args.invalid_iface_vni"
  const val conflictIface = "err.conflict.iface"
  const val notFoundUnmanagedIface = "err.not_found.unmanaged_iface"
  const val notFoundManagedIface = "err.not_found.managed_iface"
  const val preconditionFailedTooFewManagedIfaces = "err.precondition_failed.too_few_managed_ifaces"
  const val badArgsMissingRemoteVLan = "err.bad_args.missing_remote_vlan"
  const val badArgsMissingLocalVni = "err.bad_args.missing_local_vni"
  const val badArgsInvalidRemoteVLan = "err.bad_args.invalid_remote_vlan"
  const val badArgsInvalidLocalVni = "err.bad_args.invalid_local_vni"
  const val notFoundVLanIface = "err.not_found.vlan_iface"
  const val conflictVLanIface = "err.conflict.vlan_iface"
  const val conflictNetwork = "err.conflict.network"
  const val notFoundNetwork = "err.not_found.network"
  const val forbiddenDelSystemNetwork = "err.forbidden.del_system_network"
  const val badArgsMissingIpIp = "err.bad_args.missing_ip_ip"
  const val badArgsMissingIpMac = "err.bad_args.missing_ip_mac"
  const val conflictIp = "err.conflict.ip"
  const val notFoundIp = "err.not_found.ip"
  const val badArgsInvalidIp = "err.bad_args.invalid_ip"
  const val forbiddenDelSystemIp = "err.forbidden.del_system_ip"
  const val forbiddenUpdateSystemIp = "err.forbidden.update_system_ip"
  const val badArgsMissingNetworkVni = "err.bad_args.missing_network_vni"
  const val badArgsMissingNetworkV4net = "err.bad_args.missing_network_v4net"
  const val badArgsInvalidVni = "err.bad_args.invalid_vni"
  const val badArgsMissingRouteName = "err.bad_args.missing_route_name"
  const val badArgsMissingRouteType = "err.bad_args.missing_route_type"
  const val conflictRoute = "err.conflict.route"
  const val badArgsInvalidRouteArgumentTakeNoArgs = "err.bad_args.invalid_route_argument.take_no_args"
  const val badArgsInvalidRouteArgumentNotValidGatewayIp = "err.bad_args.invalid_route_argument.not_valid_gateway_ip"
  const val badArgsInvalidRouteArgumentNotValidVni = "err.bad_args.invalid_route_argument.not_valid_vni"
  const val badArgsInvalidRouteArgumentMustBeAnotherVni = "err.bad_args.invalid_route_argument.must_be_another_vni"
  const val badArgsInvalidRouteType = "err.bad_args.invalid_route_type"
  const val badArgsInvalidFlow = "err.bad_args.invalid_flow"
  const val notFoundRoute = "err.not_found.route"
  const val forbiddenDelSystemRoute = "err.forbidden.del_system_route"
  const val badArgsMissingLimitName = "err.bad_args.missing_limit_name"
  const val badArgsMissingLimitSourceMac = "err.bad_args.missing_limit_source_mac"
  const val badArgsMissingLimitTarget = "err.bad_args.missing_limit_target"
  const val badArgsMissingLimitType = "err.bad_args.missing_limit_type"
  const val badArgsMissingLimitValue = "err.bad_args.missing_limit_value"
  const val badArgsInvalidLimitValue = "err.bad_args.invalid_limit_value"
  const val badArgsInvalidLimitNeitherMacNorIpProvided = "err.bad_args.invalid_limit_neither_mac_nor_ip_provided"
  const val conflictLimitName = "err.conflict.limit_name"
  const val conflictLimitMac = "err.conflict.limit_mac"
  const val conflictLimitIp = "err.conflict.limit_ip"
  const val conflictLimitMacAndIp = "err.conflict.limit_mac_and_ip"
  const val notFoundLimit = "err.not_found.limit"
  const val badArgsInvalidLimitMac = "err.bad_args.invalid_limit_mac"
  const val badArgsInvalidLimitIp = "err.bad_args.invalid_limit_ip"
  const val badArgsInvalidMacInArp = "err.bad_args.invalid_mac_in_arp"
  const val badArgsMissingArpMac = "err.bad_args.invalid_arp_mac"
  const val badArgsMissingArpIfaceOrIp = "err.bad_args.invalid_arp_iface_or_ip"
  const val badArgsInvalidUsernameLength = "err.bad_args.invalid_username_length"
  const val badArgsInvalidUsernameChar = "err.bad_args.invalid_username_char"
  const val badArgsMissingIPPort = "err.bad_args.missing_ipport"
  const val badArgsMissingUsername = "err.bad_args.missing_username"
  const val badArgsMissingPassword = "err.bad_args.missing_password"

  const val badArgsInvalidBeginTs = "err.bad_args.invalid_begin_ts"
  const val badArgsInvalidEndTs = "err.bad_args.invalid_end_ts"
  const val badArgsInvalidPeriod = "err.bad_args.invalid_period"
  const val badArgsBeginTsGEEndTs = "err.bad_args.begin_ts_ge_end_ts"
  const val badArgsPeriodGEDuration = "err.bad_args.period_ge_duration"

  const val badArgsMissingOldPassword = "err.bad_args.missing_old_password"
  const val badArgsMissingNewPassword = "err.bad_args.missing_new_password"
  const val forbiddenOldPasswordWrong = "err.forbidden.old_password_wrong"

  const val badArgsMissingVPWSAgentConfig = "err.bad_args.missing_vpws_agent_config"

  const val badArgsMissingFlow = "err.bad_args.missing_flow"

  const val badArgsMissingWBListName = "err.bad_args.missing_wblist_name"
  const val badArgsMissingWBListSourceMac = "err.bad_args.missing_wblist_source_mac"
  const val badArgsMissingWBListTarget = "err.bad_args.missing_wblist_target"
  const val badArgsMissingWBListType = "err.bad_args.missing_wblist_type"
  const val badArgsInvalidWBListNeitherMacNorIpProvided = "err.bad_args.invalid_wblist_neither_mac_nor_ip_provided"
  const val conflictWBListName = "err.conflict.wblist_name"
  const val conflictWBListMac = "err.conflict.wblist_mac"
  const val conflictWBListIp = "err.conflict.limit_ip"
  const val notFoundWBList = "err.not_found.wblist"
  const val badArgsInvalidWBListMac = "err.bad_args.invalid_wblist_mac"
  const val badArgsInvalidWBListIp = "err.bad_args.invalid_wblist_ip"

  const val badArgsMissingScript = "err.bad_args.missing_script"
}
